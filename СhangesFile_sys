[< К содержанию](./README.md)

# Просмотр изменений в файловых системах


Команда *`git status`* отображает все файлы, которые различаются между тремя разделами.   

У файлов есть 4 состояния: 

1. Неотслеживаемый (*`untracked`*) — находится в рабочей директории, но нет ни одной версии в HEAD или в области подготовленных файлов (Git не знает о файле).
2. Изменён (*`modified`*) — в рабочей директории есть более новая версия по сравнению с хранящейся в HEAD или в области подготовленных файлов (изменения не находятся в следующем коммите).
3. Подготовлен (*`staged`*) — в рабочей директории и области подготовленных файлов есть более новая версия по сравнению с хранящейся в HEAD (готов к коммиту).
4. Без изменений — одна версия файла во всех разделах, т. е. в последнем коммите содержится актуальная версия.

Файл может быть одновременно в состоянии «*изменён*» и «*подготовлен*», если версия в рабочей директории новее, чем в области подготовленных файлов, которая в свою очередь новее версии в *HEAD*.

Мы можем использовать опцию `-s` для команды *`git status`*, чтобы получить более компактный вывод (по строке на файл).   
Если файл не отслеживается, то будет выведено ??; если он был изменён, то его имя будет красным, а если подготовлен — зелёным.

Чтобы посмотреть сами изменения, а не изменённые файлы, можно использовать следующие команды:

*`git diff`* — сравнение рабочей директории с областью подготовленных файлов;
*`git diff --staged`* — сравнение области подготовленных файлов с HEAD.
Если использовать аргумент <файл/папка>, то diff покажет изменения только для указанных файлов/папок, например *`git diff src/`*.  

# Обновление файловых систем
Команда *`git add <файл/папка>`* обновляет область подготовленных файлов версиями файлов/папок из рабочей директории.

Команда *`git commit`* обновляет HEAD новым коммитом, который делает снимки файлов в области подготовленных файлов.

Действие команды *`git reset <коммит>`* состоит из трёх потенциальных шагов:

1. Переместить указатель HEAD на `<коммит>` (например, при откате коммита в рабочей директории и области подготовленных файлов будут более новые версии файлов, чем в HEAD). 
Также указатель HEAD ветки будет перемещён на этот коммит.
2. Обновить область подготовленных файлов содержимым коммита. В таком случае только в рабочей директории будут новейшие версии файлов.
3. Обновить рабочую директорию содержимым области подготовленных файлов. С этим нужно быть осторожнее, поскольку в итоге будут уничтожены изменения файлов.
По умолчанию команда *`git reset`* выполняет только шаги 1 и 2, однако её поведение можно изменить с помощью опций `--soft` (только 1 шаг) и `--hard` (все шаги).

Если передать путь к файлу/папке, то команда будет выполнена только для них, например *`git reset --soft HEAD~1 src/`*.

Команда *`git checkout HEAD <файл>`* приводит к тому же результату, что и *`git reset --hard HEAD <файл>`* — перезаписывает версию файла в области подготовленных файлов и в рабочей директорией версией из HEAD, то есть отменяет изменения после последнего коммита.

С другой стороны, git checkout <файл> (уже без HEAD) перезаписывает версию файла в рабочей директории версией в области подготовленных файлов, то есть отменяет изменения с момента последней подготовленной версии.

Наконец, *`git rm <файл>`* отменяет отслеживание файла и удаляет его из рабочей директории, опция `--cached` позволит сохранить файл.

# Просмотр изменений
Для просмотра истории предыдущих коммитов в обратном хронологическом порядке можно использовать команду git log. Ей можно передать разные опции:

* `-p` показывает изменения в каждом коммите;
* `--stat` показывает сокращённую статистику для коммитов, например изменённые файлы и количество добавленных/удалённых строк в каждом их них;
* `-n` показывает n последних коммитов;
* `--since=___` и `--until=___` позволяет отфильтровать коммиты по промежутку времени, например `--since="2019-01-01"` покажет коммиты с 1 января 2019 года;
* `--pretty` позволяет указать формат логов (например, `--pretty=oneline`), также можно использовать `--pretty=format` для большей кастомизации, например `--pretty=format:"%h %s"`;
* `--grep` и `-S` фильтруют коммиты с сообщениями/изменениями кода, которые содержат указанную строку, например, git log -S имя_функции позволяет посмотреть добавление/удаление функции;
* `--no-merges` пропускает коммиты со слиянием веток;
* *ветка1..ветка2* позволяет посмотреть, какие коммиты из ветки 2 не находятся в ветке 1 (полезно при слиянии веток). Например, `git log master..test` покажет, каких коммитов из ветки *test* нет в *master* (о ветках поговорим чуть позже).
* `--left-right` *ветка1...ветка2* показывает коммиты, которые есть либо в ветке 1, либо в ветке 2, но не в обеих; знак < обозначает коммиты из ветка1, а > — из ветка2. Обратите внимание: используется три точки, а не две;
* `-L` принимает аргумент начало,конец:файл или :функция:файл и показывает историю изменений переданного набора строк или функции в файле.  

Другой полезной командой является *`git blame <файл>`*, которая для каждой строки файла показывает автора и контрольную сумму последнего коммита, который изменил эту строку. `-L <начало>, <конец>` позволяет ограничить эту команду заданными строками. Это можно использовать, например, для выяснения того, какой коммит привёл к определённому багу (чтобы можно было его откатить).

Наконец, есть команда *`git grep`*, которая ищет по всем файлам в истории коммитов (а не только в рабочей директории, как grep) по заданному регулярному выражению.   
Опция `-n` отображает соответствующий номер строки в файле для каждого совпадения, а `--count` показывает количество совпадений для каждого файла.

Примечание Не путайте `git grep` с `git log --grep!` Первый ищет по файлам среди коммитов, а последний смотрит на сообщения логов.